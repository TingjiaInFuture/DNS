// // // /**
// // //  * Alert: This is a test file!
// // //  * comment out the main function before running the DNS.
// // //  */

// #include <stdio.h>
// #include <string.h>
// #include <stdlib.h>
// #include <stdint.h>
// #include "platform.h"

// // 配置文件读取函数的声明
// const char* config_get_external_dns_server();

// // DNS 报头结构体
// typedef struct {
//     uint16_t id;      // 事务ID
//     uint16_t flags;   // 标志位
//     uint16_t qdcount; // 问题数
//     uint16_t ancount; // 回答数
//     uint16_t nscount; // 授权数
//     uint16_t arcount; // 附加数
// } DNSHeader;

// // DNS 问题部分结构体
// typedef struct {
//     uint16_t qtype;   // 查询类型
//     uint16_t qclass;  // 查询类
// } DNSQuestion;

// // 设置16位整数的字节顺序（大端）
// uint16_t htons(uint16_t val) {
//     return (val << 8) | (val >> 8);
// }

// // 构建DNS查询报文
// void build_dns_query(const char* domain, char* query) {
//     // 指向当前写入位置的指针
//     char *qname = query + sizeof(DNSHeader);
    
//     // 初始化报头
//     DNSHeader *header = (DNSHeader *)query;
//     header->id = htons(0x1234);       // 设置事务ID
//     header->flags = htons(0x0100);    // 设置标志位（递归查询）
//     header->qdcount = htons(1);       // 设置问题数为1
//     header->ancount = 0;              // 设置回答数为0
//     header->nscount = 0;              // 设置授权数为0
//     header->arcount = 0;              // 设置附加数为0

//     // 构建QNAME部分
//     const char *label_start = domain;
//     const char *label_end;
//     while ((label_end = strchr(label_start, '.')) != NULL) {
//         size_t label_len = label_end - label_start;
//         *qname++ = label_len;
//         memcpy(qname, label_start, label_len);
//         qname += label_len;
//         label_start = label_end + 1;
//     }

//     // 添加最后一个标签
//     size_t label_len = strlen(label_start);
//     *qname++ = label_len;
//     memcpy(qname, label_start, label_len);
//     qname += label_len;
//     *qname++ = 0;  // QNAME 以0结尾

//     // 设置查询部分
//     DNSQuestion *question = (DNSQuestion *)qname;
//     question->qtype = htons(0x0001);  // 查询类型A
//     question->qclass = htons(0x0001); // 查询类IN
// }


// int send_dns_query(const char* query, size_t query_len, char* response, size_t response_len) {
//     const char* external_dns_server = config_get_external_dns_server();
//     if (!external_dns_server) {
//         fprintf(stderr, "Failed to get external DNS server address from config\n");
//         return -1;
//     }

//     // 套接字相关变量
//     int sockfd;
//     struct sockaddr_in server_addr;

//     // 创建UDP套接字
//     if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
//         perror("socket creation failed");
//         return -1;
//     }

//     // 清零并设置服务器地址
//     memset(&server_addr, 0, sizeof(server_addr));
//     server_addr.sin_family = AF_INET;
//     server_addr.sin_port = htons(53); // DNS uses port 53

//     // 将IP地址从点分十进制转换为二进制格式
//     if (inet_pton(AF_INET, external_dns_server, &server_addr.sin_addr) <= 0) {
//         perror("inet_pton failed");
//         close(sockfd);
//         return -1;
//     }

//     // 发送DNS查询请求
//     if (sendto(sockfd, query, query_len, 0, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
//         perror("sendto failed");
//         close(sockfd);
//         return -1;
//     }

//     // 接收DNS响应
//     struct sockaddr_in from_addr;
//     socklen_t from_len = sizeof(from_addr);
//     int n = recvfrom(sockfd, response, response_len, 0, (struct sockaddr*)&from_addr, &from_len);
//     if (n < 0) {
//         perror("recvfrom failed");
//         close(sockfd);
//         return -1;
//     }

//     // 关闭套接字
//     close(sockfd);
//     return n;
// }

// // 示例配置文件读取函数
// const char* config_get_external_dns_server() {
//     // 在实际应用中，此函数应读取配置文件或其他配置来源
//     return "8.8.8.8"; // 示例：使用Google的公共DNS服务器
// }
// // 解析DNS响应
// int parse_dns_respond(const char* respond, char* ip) {
//     // 解析报头
//     DNSHeader *header = (DNSHeader *)respond;
//     uint16_t ancount = ntohs(header->ancount);

//     // 跳过报头和问题部分
//     const char *ptr = respond + sizeof(DNSHeader);

//     // 跳过QNAME
//     while (*ptr != 0) {
//         ptr += *ptr + 1;
//     }
//     ptr += 1; // 跳过QNAME的结尾0字节

//     // 跳过QTYPE和QCLASS
//     ptr += 4;

//     // 解析回答部分
//     for (int i = 0; i < ancount; i++) {
//         // 跳过NAME
//         if ((*ptr & 0xC0) == 0xC0) {
//             ptr += 2; // 压缩域名
//         } else {
//             while (*ptr != 0) {
//                 ptr += *ptr + 1;
//             }
//             ptr += 1; // 跳过NAME的结尾0字节
//         }

//         // 解析TYPE和CLASS
//         uint16_t type = ntohs(*(uint16_t *)ptr);
//         uint16_t class = ntohs(*(uint16_t *)(ptr + 2));
//         ptr += 4;

//         // 跳过TTL
//         ptr += 4;

//         // 解析RDLENGTH
//         uint16_t rdlength = ntohs(*(uint16_t *)ptr);
//         ptr += 2;

//         // 解析RDATA
//         if (type == 1 && class == 1 && rdlength == 4) { // A记录
//             sprintf(ip, "%u.%u.%u.%u", (unsigned char)ptr[0], (unsigned char)ptr[1], (unsigned char)ptr[2], (unsigned char)ptr[3]);
//             return 1;
//         }

//         // 跳过当前记录的RDATA
//         ptr += rdlength;
//     }

//     return 0; // 没有找到A记录
// }


// // 测试代码
// int main() {
//     char query[256];
//     char response[512];
//     char ip[16];
//     // 构建DNS查询报文
//     build_dns_query("baidu.com", query);

//     // 发送DNS查询并接收响应
//     int response_len = send_dns_query(query, sizeof(DNSHeader) + strlen("baidu.com") + 2 + sizeof(DNSQuestion), response, sizeof(response));

//     if (response_len > 0) {
//         printf("Received DNS response (%d bytes):\n", response_len);
//         for (int i = 0; i < response_len; i++) {
//             printf("%02x ", (unsigned char)response[i]);
//         }
//         printf("\n");
//     } else {
//         printf("Failed to receive DNS response\n");
//     }

//     if (parse_dns_respond(response, ip)) {
//         printf("Parsed IP: %s\n", ip);
//     } else {
//         printf("Failed to parse DNS response\n");
//     }

//     return 0;
// }
















// // #include <stdio.h>
// // #include <string.h>
// // #include <stdlib.h>
// // #include "log.h"

// // // 定义函数解析DNS请求并提取域名
// // int parse_dns_request(const char* request, char* domain) {
// //     int offset = 12; // 跳过12字节的报头部分
// //     int domain_len = 0;

// //     while (request[offset] != 0) {
// //         // 读取当前标签的长度
// //         int label_len = request[offset];
// //         offset++;
        
// //         // 将当前标签复制到域名缓冲区中
// //         for (int i = 0; i < label_len; i++) {
// //             domain[domain_len++] = request[offset++];
// //         }

// //         // 在标签之间添加一个点
// //         domain[domain_len++] = '.';
// //     }

// //     // 移除最后一个多余的点并添加字符串结束符
// //     if (domain_len > 0) {
// //         domain[--domain_len] = '\0';
// //     }

// //     log_debug("Parsed domain: %s", domain);
// //     return 1;
// // }

// // // 测试代码
// // int main() {
// //     // 模拟DNS请求报文
// //     char dns_request[] = {
// //         0x12, 0x34, // ID
// //         0x01, 0x00, // Flags
// //         0x00, 0x01, // QDCOUNT
// //         0x00, 0x00, // ANCOUNT
// //         0x00, 0x00, // NSCOUNT
// //         0x00, 0x00, // ARCOUNT
// //         0x07, 'e', 'x', 'a', 'm', 'p', 'l', 'e', // QNAME part 1
// //         0x03, 'c', 'o', 'm', // QNAME part 2
// //         0x00, // QNAME end
// //         0x00, 0x01, // QTYPE
// //         0x00, 0x01 // QCLASS
// //     };

// //     char domain[256];
// //     parse_dns_request(dns_request, domain);

// //     printf("Parsed domain: %s\n", domain);
// //     return 0;
// // }























// // // // main.c (测试用例)
// // // //#include "cache.h"
// // // //#include <stdio.h>
// // // //
// // // //int main() {
// // // //    cache_init(3);
// // // //
// // // //    cache_insert("example.com", "1.2.3.4");
// // // //    cache_insert("example.org", "2.3.4.5");
// // // //    cache_insert("example.net", "3.4.5.6");
// // // //
// // // //    const char* ip = cache_lookup("example.com");
// // // //    if (ip) {
// // // //        printf("example.com: %s\n", ip);
// // // //    } else {
// // // //        printf("example.com not found\n");
// // // //    }
// // // //
// // // //    cache_insert("example.edu", "4.5.6.7");
// // // //
// // // //    ip = cache_lookup("example.org");
// // // //    if (ip) {
// // // //        printf("example.org: %s\n", ip);
// // // //    } else {
// // // //        printf("example.org not found\n");
// // // //    }
// // // //
// // // //    ip = cache_lookup("example.net");
// // // //    if (ip) {
// // // //        printf("example.net: %s\n", ip);
// // // //    } else {
// // // //        printf("example.net not found\n");
// // // //    }
// // // //
// // // //    ip = cache_lookup("example.edu");
// // // //    if (ip) {
// // // //        printf("example.edu: %s\n", ip);
// // // //    } else {
// // // //        printf("example.edu not found\n");
// // // //    }
// // // //
// // // //    cache_free();
// // // //    system("pause");
// // // //    return 0;
// // // //}

// // //  //// main.c (测试用例)
// // //  //#include "log.h"
// // //  //int main() {
// // //  //    log_init();
// // //  //    log_debug("This is a debug message.");
// // //  //    log_error("This is an error message.");
// // //  //    log_close();
// // //  //    return 0;
// // //  //}
// // // // main.c (测试用例)
// // // #include "dns_query.h"
// // // #include "cache.h"
// // // #include "config.h"
// // // #include <stdio.h>
// // // #include <string.h>

// // // int main() {
// // //     // 初始化缓存
// // //     cache_init(3);

// // //     // 向缓存中插入几个域名和IP地址的映射
// // //     cache_insert("example", "1.2.3.4");
// // //     cache_insert("example.org", "2.3.4.5");
// // //     cache_insert("example.net", "3.4.5.6");

// // //     // 初始化DNS查询处理器
// // //     dns_query_init("config.txt");

// // //     // 测试查找缓存
// // //     const char* ip = cache_lookup("example");
// // //     if (ip) {
// // //         printf("Cache hit for example.com: %s\n", ip);
// // //     }
// // //     else {
// // //         printf("Cache miss for example.com\n");
// // //     }

// // //     // 测试查找数据库
// // //     char db_ip[16];
// // //     if (lookup_domain_in_db("example.com", db_ip)) {
// // //         printf("DB hit for example.com: %s\n", db_ip);
// // //     }
// // //     else {
// // //         printf("DB miss for example.com\n");
// // //     }

// // //     // 测试发送请求
// // //     dns_query_handle_request();

// // //     // 清理资源
// // //     dns_query_cleanup();
// // //     cache_free();
// // //     system("pause");
// // //     return 0;
// // // }